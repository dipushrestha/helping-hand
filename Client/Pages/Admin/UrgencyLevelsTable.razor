@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<MudTable Items="@Urgencies" Dense="true" Hover="true" CanCancelEdit="true" 
    Filter="new Func<Urgency,bool>(FilterFunc)" SortLabel="Sort By" @bind-SelectedItem="selectedItem"
    CommitEditTooltip="Commit Edit" OnCommitEditClick="UpdateUrgency" 
    RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Urgency Levels</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" 
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50%;" />
        <col style="width:30%;" />
        <col style="width:20%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Urgency, object>(x=>x.Label)">Label</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Urgency, object>(x=>x.Level)">Priority Level</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Urgency, object>(x=>x.IsActive)">Active</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Service">@context.Label</MudTd>
        <MudTd DataLabel="Service">@context.Level</MudTd>
        <MudTd DataLabel="Active">@(context.IsActive ? "Yes" : "No")</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Label">
            <MudTextField @bind-Value="@context.Label" Required />
        </MudTd>
        <MudTd DataLabel="Label">
            <MudTextField @bind-Value="@context.Level" Required />
        </MudTd>
        <MudTd DataLabel="Active">
            <MudSwitch Color="Color.Primary" @bind-Checked="@context.IsActive"></MudSwitch>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<string> editEvents = new();
    private string searchString = "";
    private Urgency elementBeforeEdit;
    private Urgency selectedItem = null;
    private HashSet<Urgency> selectedItems = new HashSet<Urgency>();

    private IEnumerable<Urgency> Urgencies = new List<Urgency>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Urgencies = await httpClient.GetFromJsonAsync<List<Urgency>>("api/admin/urgencies");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task UpdateUrgency()
    {
        try
        {
            var authToken = await LocalStorage.GetItemAsync<string>("authToken");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", authToken);

            var response = await httpClient
                .PutAsJsonAsync<Urgency>($"api/admin/urgencies/{selectedItem.Id}", selectedItem);

            if (response.StatusCode != HttpStatusCode.NoContent)
            {
                var error = await response.Content.ReadFromJsonAsync<Error>();
				Snackbar.Add(error.Title, Severity.Error);
                ResetItemToOriginalValues(selectedItem);

				return;
            }

            Snackbar.Add("Urgency updated", Severity.Info);
        }
        catch (Exception ex)
        {
            ResetItemToOriginalValues(selectedItem);
            Snackbar.Add($"Error while updating the Urgency! 😔 {ex.Message}", Severity.Error);
        }
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {            
            Label = ((Urgency)element).Label,
            Level = ((Urgency)element).Level,
            IsActive = ((Urgency)element).IsActive
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Urgency {((Urgency)element).Label}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Urgency {((Urgency)element).Label} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Urgency)element).Label = elementBeforeEdit.Label;
        ((Urgency)element).IsActive = elementBeforeEdit.IsActive;
        AddEditionEvent($"RowEditCancel event: Editing of Urgency {((Urgency)element).Label} cancelled");
    }

    private bool FilterFunc(Urgency element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Label.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
