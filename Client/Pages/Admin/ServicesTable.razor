@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<MudTable Items="@HelpServices" Dense="true" Hover="true" CanCancelEdit="true" 
    Filter="new Func<HelpService,bool>(FilterFunc)" SortLabel="Sort By" @bind-SelectedItem="selectedItem"
    CommitEditTooltip="Commit Edit" OnCommitEditClick="UpdateHelpService" 
    RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Services</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:80%;" />
        <col style="width:20%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<HelpService, object>(x=>x.Service)">Service</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<HelpService, object>(x=>x.IsActive)">Active</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Service">@context.Service</MudTd>
        <MudTd DataLabel="Active">@(context.IsActive ? "Yes" : "No")</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Service">
            <MudTextField @bind-Value="@context.Service" Required />
        </MudTd>
        <MudTd DataLabel="Active">
            <MudSwitch Color="Color.Primary" @bind-Checked="@context.IsActive" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<string> editEvents = new();
    private string searchString = "";
    private HelpService elementBeforeEdit;
    private HelpService selectedItem = null;
    private HashSet<HelpService> selectedItems = new HashSet<HelpService>();

    private IEnumerable<HelpService> HelpServices = new List<HelpService>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HelpServices = await httpClient.GetFromJsonAsync<List<HelpService>>("api/admin/help-services");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private async Task UpdateHelpService()
    {
        try
        {
            var authToken = await LocalStorage.GetItemAsync<string>("authToken");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", authToken);

            var response = await httpClient
                .PutAsJsonAsync<HelpService>($"api/admin/help-services/{selectedItem.Id}", selectedItem);

            if (response.StatusCode != HttpStatusCode.NoContent)
            {
                var error = await response.Content.ReadFromJsonAsync<Error>();
				Snackbar.Add(error.Title, Severity.Error);
                ResetItemToOriginalValues(selectedItem);

				return;
            }

            Snackbar.Add("Help Service updated", Severity.Info);
        }
        catch (Exception ex)
        {
            ResetItemToOriginalValues(selectedItem);
            Snackbar.Add($"Error while updating the Urgency! 😔 {ex.Message}", Severity.Error);
        }
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {            
            Service = ((HelpService)element).Service,
            IsActive = ((HelpService)element).IsActive
        };
        AddEditionEvent($"RowEditPreview event: made a backup of HelpService {((HelpService)element).Service}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to HelpService {((HelpService)element).Service} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((HelpService)element).Service = elementBeforeEdit.Service;
        ((HelpService)element).IsActive = elementBeforeEdit.IsActive;
        AddEditionEvent($"RowEditCancel event: Editing of HelpService {((HelpService)element).Service} cancelled");
    }

    private bool FilterFunc(HelpService element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Service.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
