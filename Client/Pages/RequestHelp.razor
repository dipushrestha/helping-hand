@page "/request-help"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<br />
<MudContainer MaxWidth="MaxWidth.Medium">
<EditForm Model="helpRequest" OnValidSubmit="PostHelpRequest">
	<DataAnnotationsValidator />
	<MudCard>
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6" Align="Align.Left">How can we help you?</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent>
			<MudGrid>
				<MudItem xs="12" sm="8" md="8">
					<MudSelect 
						T="string" Label="Service" Required="true" For="() => helpRequest.Services"
						HelperText="Select the help you need." MultiSelection="true" 
						@bind-Value="helpRequest.Services" @bind-SelectedValues="options">

						@foreach (var service in services)
						{
							<MudSelectItem T="string" Value="@service.Service">@service.Service</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem xs="12" sm="4" md="4">
					<MudSelect 
						T="string" Label="Urgency" Required="true" For="() => helpRequest.Urgency"
						HelperText="Select urgency for the help." 
						@bind-Value="helpRequest.Urgency">

						@foreach (var urgencyLevel in urgencyLevels)
						{
							<MudSelectItem T="string" Value="@urgencyLevel.Label">@urgencyLevel.Label</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem xs="12" sm="12" md="12">
					<MudTextField For="() => helpRequest.Message"
						@bind-Value="helpRequest.Message" Label="Additional Message (Optional)" 
						HelperText="Anything else you would like to add." Variant="Variant.Text">
					 </MudTextField>
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard><br />
	<MudCard>
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6" Align="Align.Left">Where is your location?</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent>
			<MudGrid>
				<MudItem  xs="12" sm="12" md="12">
					<MudTextField 
						@bind-Value="helpRequest.Address" For="() => helpRequest.Address">
						Label="Address" Required="true" Variant="Variant.Text">
					</MudTextField>
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard><br />
	<MudCard>
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6" Align="Align.Left">How can we contact you?</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent>
			<MudGrid>
				<MudItem  xs="12" sm="12" md="12">
					<MudTextField 
						@bind-Value="helpRequest.PhoneNumber" For="() => helpRequest.PhoneNumber"
						Label="Phone Number" Required="true" Variant="Variant.Text">
					</MudTextField>
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard><br />
	<MudCard>
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6" Align="Align.Left">What is your name? (optional)</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent>
			<MudGrid>
				<MudItem  xs="12" sm="12" md="12">
					<MudTextField @bind-Value="helpRequest.Name" For="() => helpRequest.Name"
						Label="Name" Variant="Variant.Text"></MudTextField>
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard><br />
	<MudButton 
		ButtonType="ButtonType.Submit"
		Variant="Variant.Filled" Color="Color.Primary" 
		EndIcon="@Icons.Material.Filled.Send">
		Request
	</MudButton>
	<br />&nbsp;
</EditForm>
</MudContainer>

@code {

	private readonly HelpRequest helpRequest = new();

	private List<HelpService> services = new();
	private List<Urgency> urgencyLevels = new();

    public HashSet<string> options { get; set; } = new HashSet<string>() {};

	
	protected override async Task OnInitializedAsync()
	{
		try
        {
            services = await Http.GetFromJsonAsync<List<HelpService>>("api/admin/help-services");
			urgencyLevels = await Http.GetFromJsonAsync<List<Urgency>>("api/admin/urgencies");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
	}

	public async Task PostHelpRequest()
	{
		try
		{
			helpRequest.RequestedDate = DateTime.Now;
			var response = await Http.PostAsJsonAsync("/api/help-requests", helpRequest);

			if (response.StatusCode != HttpStatusCode.Created)
			{
				var error = await response.Content.ReadFromJsonAsync<Error>();
				Snackbar.Add(error.Title, Severity.Error);

				return;
			}

			Snackbar.Add("Help is on the way! Stay safe 😇", Severity.Success);
			NavigationManager.NavigateTo("/offer-help");
		} 
		catch (Exception ex)
		{
			Snackbar.Add($"Error while posting the help request! 😔 {ex.Message}", Severity.Error);
		}
	}
 }
