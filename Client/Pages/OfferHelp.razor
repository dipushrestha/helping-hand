@page "/offer-help"
@inject HttpClient Http
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large">
	<MudChipSet MultiSelection="true" @bind-SelectedChips="selectedChips">
		@foreach(var service in servicesCount)
		{
			<MudChip OnClick="FilterHelpRequestsByService" Text="@service.Key"></MudChip>
		}
	</MudChipSet>
	<br />
	<MudGrid>
		@foreach (var helpRequest in helpRequests)
		{
			<MudItem xs="12" sm="6" md="6" lg="4">
				<MudCard>
					<MudCardContent>
						<MudText Typo="Typo.body1">
							Help needed with <strong>@helpRequest.Services.Split(",").Humanize()</strong>.
						</MudText>
						<MudDivider Class="my-2"/>
						<MudText Typo="Typo.body2">Address:- <address>@helpRequest.Address</address></MudText>
						<MudDivider Class="my-2"/>

						@if(!string.IsNullOrEmpty(helpRequest.Name))
						{
							<MudText Typo="Typo.body2">Name: @helpRequest.Name</MudText>
						}
				
						@if(!string.IsNullOrEmpty(helpRequest.Message))
						{
							<MudText Typo="Typo.body2"> Message: @helpRequest.Message</MudText>
						}

						<MudText Typo="Typo.caption"><em>Posted @helpRequest.RequestedDate.Humanize(utcDate: false).</em></MudText>
						<MudDivider Class="my-6"/>

						<div style="display: flex; justify-content: space-between">
							<MudFab 
								Label="Help" Size="Size.Small" 
								Icon="@Icons.Material.Filled.AddCall"
								OnClick="@(() => OpenOfferHelpDialog(helpRequest.PhoneNumber))" 
							/>
							<MudChip Color="@(ExtensionMethods.GetUrgencyTagColor(helpRequest.Urgency))" 
								Size="Size.Small" Style="position: ab">@helpRequest.Urgency</MudChip>
						</div>
					</MudCardContent>
				</MudCard><br />
			</MudItem>
		}
	</MudGrid>
	<br />&nbsp;
</MudContainer>

@code {
	private List<HelpRequest> initialHelpRequests = new();
	private List<HelpRequest> helpRequests = new();
	private List<HelpService> helpServices = new();
	private List<Urgency> urgencyLevels = new();
	private Dictionary<string, int> servicesCount = new();

	private MudChip[] selectedChips;
	private DialogParameters dialogParameters = new DialogParameters();
	private DialogOptions dialogOptions = new DialogOptions { MaxWidth = MaxWidth.Large };

	protected override async Task OnInitializedAsync()
	{
		helpServices = await Http.GetFromJsonAsync<List<HelpService>>("/api/admin/help-services");
		urgencyLevels = await Http.GetFromJsonAsync<List<Urgency>>("api/admin/urgencies");
		helpRequests.AddRange(await GetHelpRequests());
		initialHelpRequests.AddRange(helpRequests);

		servicesCount = ExtensionMethods.GetHelpServicesCount(helpServices, helpRequests);
	}

	public void OpenOfferHelpDialog(string phoneNumber)
	{
		dialogParameters.Add("PhoneNumber", phoneNumber);
		DialogService.Show<ContactDialog>("Offer Help", dialogParameters, dialogOptions);
	}

	public async Task<List<HelpRequest>> GetHelpRequests()
	{
		var requests = await Http.GetFromJsonAsync<List<HelpRequest>>("/api/help-requests");

		return requests
			.OrderBy(r => ExtensionMethods.GetUrgencyLevel(urgencyLevels, r.Urgency))
			.ThenBy(r => r.RequestedDate)
			.ToList();
	}

	private void FilterHelpRequestsByService()
	{
		List<HelpRequest> tempList = new List<HelpRequest>();
		tempList.AddRange(initialHelpRequests);
		helpRequests = tempList;

		if (selectedChips.Length > 0)
		{
			
			helpRequests = helpRequests
				.Where(h => selectedChips.Select(s => s.Text).ToArray().Any(h.Services.Contains))
				.ToList();
		} 
	}
}
