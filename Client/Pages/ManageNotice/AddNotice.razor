@page "/manage-notice/post"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium">
<EditForm Model="notice" OnValidSubmit="PostNotice">
	<DataAnnotationsValidator />
	<MudCard>
		<MudCardContent>
			<MudTextField For="() => notice.Title" Required="true"
				@bind-Value="notice.Title" Label="Title" 
				HelperText="Notice title" Variant="Variant.Text">
			</MudTextField>
			<MudTextField For="() => notice.Details" Required="true"
				@bind-Value="notice.Details" Label="Details" 
				HelperText="Notice details" Variant="Variant.Text">
			</MudTextField>
			<MudTextField For="() => notice.Link"
				@bind-Value="notice.Link" Label="Link" 
				HelperText="Link with additional information" Variant="Variant.Text">
			</MudTextField>
		</MudCardContent>
	</MudCard><br />
	<MudButton 
		ButtonType="ButtonType.Submit"
		Variant="Variant.Filled" Color="Color.Primary" 
		EndIcon="@Icons.Material.Filled.Send">
		Post
	</MudButton>
	<br />&nbsp;
</EditForm>
</MudContainer>

@code {
	private readonly Notice notice = new();
	
	public async Task PostNotice()
	{
		try
		{
			notice.Date = DateTime.Now;
			var response = await Http.PostAsJsonAsync("/api/notices", notice);

			if (response.StatusCode != HttpStatusCode.Created)
			{
				var error = await response.Content.ReadFromJsonAsync<Error>();
				Snackbar.Add(error.Title, Severity.Error);

				return;
			}

			Snackbar.Add("Notice posted! 😇", Severity.Success);
			NavigationManager.NavigateTo("/offer-help");
		} 
		catch (Exception ex)
		{
			Snackbar.Add($"Error while posting the notice! 😔 {ex.Message}", Severity.Error);
		}
	}
 }
