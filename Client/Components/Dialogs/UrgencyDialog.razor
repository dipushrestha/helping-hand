@inject HttpClient Http
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<EditForm Model="urgency" OnValidSubmit="AddUrgency">
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AddToQueue" Class="mr-3 mb-n1"/>
            Add Urgency
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Label="Label" @bind-Value="urgency.Label" For="() => urgency.Label"/>
        <MudNumericField Label="Level" @bind-Value="urgency.Level" For="() => urgency.Level" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private Urgency urgency = new();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task AddUrgency()
    {
        try
		{
            urgency.IsActive = true;
            var authToken = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", authToken);

			var response = await Http.PostAsJsonAsync("/api/admin/urgencies", urgency);

			if (response.StatusCode != HttpStatusCode.Created)
			{
				var error = await response.Content.ReadFromJsonAsync<Error>();
				Snackbar.Add(error.Title, Severity.Error);

				return;
			}

			Snackbar.Add("Urgency Added 😇", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
		} 
		catch (Exception ex)
		{
			Snackbar.Add($"Error while adding the urgency! 😔 {ex.Message}", Severity.Error);
		}
    }
}
